#! /usr/bin/env python3

####################################################################################################
#
# Climbing Asso Portal - A Portal for Climbing Club (Association)
# Copyright (C) 2018 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

import argparse
import signal
import subprocess
import sys
import time

####################################################################################################

argument_parser = argparse.ArgumentParser(description='Manage Celery Processes')

argument_parser.add_argument(
    '--log-level',
    default='info',
    help='Log level',
)

argument_parser.add_argument(
    'command', metavar='COMMAND',
    help='start, status',
)

global_args = argument_parser.parse_args()

####################################################################################################

PROJECT = 'ClimbingAssoPortalSite'

####################################################################################################

def run_command(command, *args):

    command_args = [
        'celery',
        '-A', PROJECT,
        command,
        '--loglevel', global_args.log_level,
    ]
    command_args += args
    return subprocess.Popen(command_args, stdout=sys.stdout)

####################################################################################################

def start():

    beat = run_command('beat', '--scheduler=django_celery_beat.schedulers:DatabaseScheduler')
    worker = run_command('worker')
    processes = (beat, worker)

    def terminate(signal=None, frame=None):
        for process in processes:
            if process.poll() is None:
                process.terminate()
        sys.exit(0)

    # catched by process ???
    # signal.signal(signal.SIGINT, terminate)

    must_exit = True
    while must_exit:
        time.sleep(30)
        for process in processes:
            if process.poll() is not None:
                print('Dead Process:', process.args)
                must_exit = True

    terminate()

####################################################################################################

def status():

    subprocess.call(('celery', '-A', PROJECT, 'status'))

####################################################################################################

# Run command
globals()[global_args.command]()
