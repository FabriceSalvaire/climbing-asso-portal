#! /usr/bin/env python3

####################################################################################################
#
# Climbing Asso Portal - A Portal for Climbing Club (Association)
# Copyright (C) 2018 Fabrice Salvaire
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
####################################################################################################

####################################################################################################

from pathlib import Path
import argparse
import glob
import json
import os
import subprocess

####################################################################################################

BASE_DIR = Path(__file__).parent.resolve()
APPLICATION = 'ClimbingAssoPortal'

####################################################################################################

def print_banner(title, width=100):

    print('\n')
    rule = '=' * width
    print(rule)
    print(title.center(width))
    print(rule)
    print()

####################################################################################################

def yes_no(message, default='y'):
    response = input(message + ' : y/n [{}]'.format(default)).lower().strip()
    if not response:
        response = default
    return response == 'y'

####################################################################################################

def manage(*args):
    subprocess.check_call(('manage.py', *args))

####################################################################################################

def check(args=None):

    print_banner('Check')
    manage('check')

####################################################################################################

# Dangerous action !
def drop_migrations(args=None):

    print_banner('Drop migrations')
    pattern = str(BASE_DIR.joinpath(APPLICATION, 'migrations', '0*.py'))
    migrations = glob.glob(pattern)
    migrations.sort()
    for path in migrations:
        if yes_no('Drop {} ?'.format(path), default='n'):
            os.unlink(path)

####################################################################################################

def migrate(args=None):

    print_banner('Migrate database')
    manage('makemigrations')
    manage('migrate')

####################################################################################################

def collect_static(args=None):

    print_banner('Collect static')
    manage(
        'collectstatic',
        '--noinput',
        '--clear',
        '--link',
    )

####################################################################################################

def create_superuser(args=None):

    print_banner('Create superuser / admin')

    if args is None:
        superuser = create_superuser_parser.get_default('superuser')
        superuser_email = create_superuser_parser.get_default('superuser_email')
    else:
        superuser = args.superuser
        superuser_email = args.superuser_email

    manage(
        'createsuperuser',
        # '--noinput',
        '--username', superuser,
        '--email', superuser_email,
    )

####################################################################################################

def load_data(args=None):

    print_banner('Load Data')
    # pattern = str(BASE_DIR.joinpath(APPLICATION, 'fixtures', '*.json'))
    pattern = str(BASE_DIR.joinpath('fixtures', '*.json'))
    fixtures = glob.glob(pattern)
    fixtures.sort()
    for fixture in fixtures:
        # print('load', fixture)
        if yes_no('Load {} ?'.format(fixture), default='y'):
            manage('loaddata', fixture)
    # manage('loaddata', *fixtures)
    if yes_no('Update french cities ?', default='y'):
        # manage('update_french_cities')
        json_path = BASE_DIR.joinpath('data', 'base_des_communes', 'laposte_hexasmal.json')
        manage('update_french_cities', '--laposte-hexasmal-json', json_path)
    if yes_no('Update routes ?', default='y'):
        manage('update_routes')
    # manage('import_members')

####################################################################################################

def create_initial_revisions(args=None):

    print_banner('Create initial revisions')
    manage(
        'createinitialrevisions',
        APPLICATION + '.UserProfile',
        '--comment', 'Initial revision.'
    )

####################################################################################################

def dump_data(args=None):

    print_banner('Dump Data')

    model_name = 'auth.Group'
    fixture_name = '002_Group'
    output_path = BASE_DIR.joinpath('fixtures', fixture_name + '.json')
    print('Dump {} to {}'.format(model_name, output_path))
    manage('dumpdata', model_name, '-o', output_path)
    with open(output_path) as fh:
        json_data = json.load(fh)
    with open(output_path, 'w') as fh:
        json.dump(json_data, fh, indent=4, sort_keys=True)

####################################################################################################

def all_setup(args=None):

    check()
    migrate()
    collect_static()
    create_superuser()
    load_data()
    create_initial_revisions()

####################################################################################################
#
#                                         Arugment Parser
#
####################################################################################################

parser = argparse.ArgumentParser(description='Boostrap Climbing Asso Portal.')

subparsers = parser.add_subparsers(
    title='subcommands',
    description='valid subcommands',
    help='additional help',
)

##################################################

all_setup_parser = subparsers.add_parser(
    'all',
    help='Run all setup commands',
)

all_setup_parser.set_defaults(func=all_setup)

##################################################

check_parser = subparsers.add_parser(
    'check',
    help='Check setup',
)

check_parser.set_defaults(func=check)

##################################################

migrate_parser = subparsers.add_parser(
    'migrate',
    help='Migrate database',
)

migrate_parser.set_defaults(func=migrate)

##################################################

collect_static_parser = subparsers.add_parser(
    'collect_static',
    help='Collect static',
)

collect_static_parser.set_defaults(func=collect_static)

##################################################

create_superuser_parser = subparsers.add_parser(
    'create_superuser',
    help='Create superuser',
)

create_superuser_parser.add_argument(
    '--superuser', default='admin',
    help='Super user name',
)

create_superuser_parser.add_argument(
    '--superuser-email', default='admin@climbing-asso-portal.fr',
    help='Super user email',
)

create_superuser_parser.set_defaults(func=create_superuser)

##################################################

load_data_parser = subparsers.add_parser(
    'load_data',
    help='Load data',
)

load_data_parser.set_defaults(func=load_data)

##################################################

create_initial_revisions_parser = subparsers.add_parser(
    'create_initial_revisions',
    help='Create initial revisions',
)

create_initial_revisions_parser.set_defaults(func=create_initial_revisions)

##################################################

drop_migrations_parser = subparsers.add_parser(
    'drop_migrations',
    help='Drop migrations',
)

drop_migrations_parser.set_defaults(func=drop_migrations)

##################################################

dump_data_parser = subparsers.add_parser(
    'dump_data',
    help='Dump data',
)

dump_data_parser.set_defaults(func=dump_data)

##################################################

args = parser.parse_args()

# Call command
if 'func' in args:
    args.func(args)
else:
    parser.print_help()
